#!/usr/bin/env ruby
#================================================================================================================================
#
# Ruby Compiler Compiler (rcc)
#
# Copyright 2007 Chris Poirier (cpoirier@gmail.com)
# Licensed under the Academic Free License version 2.1
#
#================================================================================================================================
#
#  === DO NOT EDIT THIS FILE! ===
# 
#  It was GENERATED by rcc on %%GENERATION_DATE%%
#     from grammar "%%GRAMMAR_NAME%%"
#
#================================================================================================================================


require "#{File.dirname(__FILE__)}/common.rb" 
require "#{File.dirname(__FILE__)}/node.rb" 


%%MODULE_HEADER%%
 


 #============================================================================================================================
 # class Parser
 #  - not much I can say here . . . 

   class %%GRAMMAR_CLASS_NAME%%Parser
      include Common
      
      
      class State
         attr_reader :actions
      end
      
      class Production
         attr_reader :name
         attr_reader :name_number
         attr_reader :node_type
         attr_reader :symbol_count
         attr_reader :slot_mappings
         attr_reader :base_processor_name
         attr_reader :specific_processor_name
         
         def initialize( name, name_number, node_type, symbol_count, slot_mappings, ignored = nil )
            @name          = name
            @name_number   = name_number
            @node_type     = node_type
            @symbol_name   = symbol_name
            @slot_mappings = slot_mappings
            
            @base_processor_name     = "process_#{@name}"
            @specific_processor_name = "#{@base_processor}__production_#{@name_number}"
         end
         
         def enslot_nodes( nodes )
            slots = {}
            @slot_mappings.each do |index, name|
               slots[name] = nodes[index]
            end
            return slots
         end
      end
      

    #---------------------------------------------------------------------------------------------------------------------
    # Initialization and public interface
    #---------------------------------------------------------------------------------------------------------------------
    
    
      #
      # initialize()
   
      def initialize()
         @node_stack  = []
         @state_stack = []
      end
      





    #---------------------------------------------------------------------------------------------------------------------
    # Internal machinery
    #---------------------------------------------------------------------------------------------------------------------
    
    protected    
    

      #
      # reduce_by()
      #  - reduces nodes from the stack to a new node, using a Production
      #  - returns the new Node
      
      def reduce_by( production )
         produced_node = nodes = nil
         
         #
         # First up, pop off the requisite number of objects from the node stack.  We also discard the same number of items 
         # from the other stacks.  Note that, for production purposes, we want the nodes in oldest-to-newest order. 
         
         nodes = @node_stack.slice!(  -production.symbol_count..-1  )
                 @state_stack.slice!( -production.symbol_count..-1  )
         
         #
         # Build the production Node.
         
         produced_node = Node.new( production.node_type )
         
         #
         # If the user has defined a processor for this production, call it and save the result in the Node.
         
         if method_defined?(production.specific_processor_name) then
            produced_node.value = send( production.specific_processor_name, *nodes )
         elsif method_defined?(production.base_processor_name) then
            produced_node.value = send( production.base_processor_name, production.enslot_nodes(nodes) )
         end
         
         #
         # Return the produced Node.
         
         return produced_node
      end






    #---------------------------------------------------------------------------------------------------------------------
    # States
    #---------------------------------------------------------------------------------------------------------------------
    
    protected    
    
      %%STATES%%
    
    
    
    
    
    #---------------------------------------------------------------------------------------------------------------------
    # Productions
    #---------------------------------------------------------------------------------------------------------------------
    
    protected    
    
      %%PRODUCTIONS%%




    
    #---------------------------------------------------------------------------------------------------------------------
    # Support code
    #---------------------------------------------------------------------------------------------------------------------
    
    protected
    
      
   end # %%GRAMMAR_CLASS_NAME%%Parser
   

%%MODULE_FOOTER%%
