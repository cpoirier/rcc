
grammar BasicMath
   priority ascending
   start_rule program
   discard whitespace
   discard eol

   eol        := [\n]
   whitespace := [ \t\r]+
      
   program    := statement+
   
   group expression
      group integer
         decimal                := [0-9]+
         hex                    := [0][x][0-9a-fA-F]+
         octal                  := [0][0-7]+
      end
      
      float                     := [0-9]+ [.] [0-9]* ([eE][0-9]+)?
      identifier                := [a-z][a-zA-Z0-9_]*

      subexpression             := '(' expression ')'
      addition_expression       := expression:lhs '+' expression:rhs    {left associative}
      subtraction_expression    := expression:lhs '-' expression:rhs    {left associative}
      multiplication_expression := expression:lhs '*' expression:rhs    {left associative}
      division_expression       := expression:lhs '/' expression:rhs    {left associative}
      special_expression        := expression '*' expression '*' '(' identifier ')'
   end
   
   reorder
      addition_expression       substraction_expression
      multiplication_expression division_expression
   end

   group statement
      assignment_statement := identifier '=' expression eol:ignore ;
      if_statement         := 'if' '(' expression ')' '{' statement* '}' ;
      if_lookalike         := 'if' subexpression '{' statement* '}' 'booya' eol:ignore ;
   end
end




# 
# stop
# 
# 
# a = ((10 - 3)
# )
# b = 20
# 
# id = 10
# if( 10 * 7 * (id) )
# {
#    a = 10 * 7 * (id) 
#    b = 18 * 3 * (37) - 19 * 4 * (37)
#    c = 12 - 14 - 27 * 36
# }
# 
# 
# if (10 - 3
# )
# {
#    a = 10 * 
#    7
# }
# booya
# 
# b = 20
# 
# 
