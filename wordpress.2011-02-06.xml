<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log into that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/2.8.4" created="2011-02-06 01:01"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>RCC</title>
	<link>http://rcc.courage-my-friend.org</link>
	<description>ruby compiler compiler</description>
	<pubDate>Sat, 24 Jan 2009 09:15:12 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.8.4</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://rcc.courage-my-friend.org</wp:base_site_url>
	<wp:base_blog_url>http://rcc.courage-my-friend.org</wp:base_blog_url>
	<wp:category><wp:category_nicename>announcements</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Announcements]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>blogroll</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Blogroll]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>discussions</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Discussions]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>general</wp:category_nicename><wp:category_parent>Discussions</wp:category_parent><wp:cat_name><![CDATA[General]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>usage</wp:category_nicename><wp:category_parent>Discussions</wp:category_parent><wp:cat_name><![CDATA[Usage]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>concepts</wp:category_nicename><wp:category_parent>Discussions</wp:category_parent><wp:cat_name><![CDATA[Concepts]]></wp:cat_name></wp:category>
	<wp:tag><wp:tag_slug>feature</wp:tag_slug><wp:tag_name><![CDATA[feature]]></wp:tag_name></wp:tag>
		<item>
<title>Introduction to RCC Grammars (Part 2)</title>
<link>http://rcc.courage-my-friend.org/?p=72</link>
<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Usage]]></category>

		<category domain="category" nicename="usage"><![CDATA[Usage]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=72</guid>
<description></description>
<content:encoded><![CDATA[### Ignored Symbols

As noted above, you can tell RCC to ignore certain symbols produced by the lexer.  This is useful, for instance, to tell RCC to ignore whitespace and comments, when generating tokens for the parser.  They will be lexed according to your specifications, and discarded.  However, sometimes, there are special cases -- times when a normally-ignored symbol is important:

* if you refer to a symbol in a rule, it will not be ignored by the lexer in that context
* if you use a `!` marker before a symbol in a rule, the rule fails if that symbol actually occurs, *even if* it would normally be ignored.


]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>72</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Articles</title>
<link>http://rcc.courage-my-friend.org/articles/</link>
<pubDate>Wed, 17 Oct 2007 03:50:38 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/articles/</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>29</wp:post_id>
<wp:post_date>2007-10-16 23:50:38</wp:post_date>
<wp:post_date_gmt>2007-10-17 03:50:38</wp:post_date_gmt>
<wp:comment_status>closed</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>articles</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>archives.php</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Introduction</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/introduction/</link>
<pubDate>Fri, 18 Jan 2008 12:36:56 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/articles/2008/01/18/introduction/</guid>
<description></description>
<content:encoded><![CDATA[So, RCC is my attempt to write an LR compiler compiler.  I'm doing a [consumer-oriented database system](http://rethink.courage-my-friend.org) and I need several languages to control the system.  Last June (2007), I had a look around for an existing tool I could use, and wasn't happy with the options.  My requirements were fairly simple:
 
* I needed to be able to generate a parser in (at least) Ruby and Objective-C
* I needed the parser to produce reasonable-quality error messages
* I needed the generator to have good documentation or readable code, so I could figure out how to use it (and how to fix it, should need arise)
* I didn't want to have to do a lot of math to get my grammar to work with the generator

Anyway, after several frustrating days with existing systems, I decided to write my own.  I figured it would take at most a month, and that I could live with that investment.  So, naturally, it's seven months later and I'm about ready to release it.  

D'oh!

Of course, RCC (short for Ruby Compiler Compiler -- hey, I poured all my creativity into the *code* :-P ) has grown a bit since I started it.  It now generates your lexer and AST, as well as the parser, and includes facilities to do simple AST transformations during construction (to reduce the amount of stuff you have to do to it after).  The system also includes a grammar interpreter that explains *exactly* how your grammar deals with a particular source file, and *why*.  This should make debugging grammars a lot easier.

Finally, the biggest feature (it sure as hell took the most time!) is the error recovery system, which attempts to figure out what the programmer had *intended* to type whenever an error is encountered, so error messages more reliably direct the user to the *real* problem.

In terms of status, I'm presently working on a pre-release refactoring of the RCC code base.  The biggest aspect of this is a redesign of the grammar description language, which used to look a bit like *yacc*, and doesn't any more (some of the assumptions I started with are no longer helpful).  During development, the grammar was loaded by an *ad hoc* parser I wrote for the purpose.  It was rather ugly, and didn't produce the friendliest of error messages.  The new grammar is being parsed by RCC's grammar interpreter, so you get all the benefits of the error recovery and automated help systems.  Yay!

More soon ....  :-)

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>67</wp:post_id>
<wp:post_date>2008-01-18 07:36:56</wp:post_date>
<wp:post_date_gmt>2008-01-18 12:36:56</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>introduction</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Why bother creating new programming languages?</title>
<link>http://rcc.courage-my-friend.org/discussions/general/articles/why-bother-creating-new-programming-languages/</link>
<pubDate>Wed, 23 Jan 2008 07:35:27 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[General]]></category>

		<category domain="category" nicename="general"><![CDATA[General]]></category>

		<category domain="tag"><![CDATA[feature]]></category>

		<category domain="tag" nicename="feature"><![CDATA[feature]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/articles/2008/01/23/why-bother-creating-new-programming-languages/</guid>
<description></description>
<content:encoded><![CDATA[I know that at least a few of you are probably asking that question.  And I guess it's a fair question -- programming languages take a certain level of skill to design, and a certain level of expertise to implement.  Truth be told, there seems to be a common perception that language designers rate up there with brain surgeons and rocket scientists on the nerd scale.  And, to make matters worse, programming languages have a bad reputation as being hard to learn.

So, if only rare developers can create them, and using custom languages eliminates the "commodity" status on programmers, why would you even consider creating your own?

Well, *even* if we accept those two points as truth, the answer is still simple: **with the right programming language, you can get a *lot* more done.**



## A contrived example

Consider this program describing a common activity:

<pre><code>
   activate neurons 9388908 through 9388940
   wait 0.0002s
   activate neurons 9700938 through 9800838
   activate neurons 3992893 through 3992897
   wait 0.0001847
   deactivate neurons 9388908 through 9388912
   deactivate neurons 9388908 through 9388912


   (40 or 50 *billion* instructions skipped for space reasons)


   wait 0.0827053
   deactivate neurons 9388908 through 9388912
</code></pre>

Now, consider this same example in a higher-level language:

<pre><code>
   hold the bat &lt;here>
   bring it up to your shoulder like &lt;this>
   watch for the ball
      as it approaches, swing the bat down and forward into line with the ball
         follow through
</code></pre>

Okay, okay -- there is a lot more to swinging a baseball bat effectively than either of these two examples show, but I think it demonstrates the fundamental differences between low-level programming languages and a high-level ones:

| low-level languages | high-level languages |
|------------------------|-------------------------|
| are very *precise*        | are very *terse*            |
| make few assumptions | *rely* on assumptions |
| can be used for almost anything | are *very* specific to a single problem space |

To me, the value of new programming languages is not in offering different syntax for the same thing.  That's not what I'm talking about, here.  If the primary reason you want to write a new programming language is because you want to use { and } to delimit lists, instead of [ and ], or because you think % is a better address-of operator than &, you and I haven't got much left to talk about.  ;-)

The value in building new programming languages is in offering better, richer, more *expressive* ways to describe a solution to a problem, ways that shift the focus away from the "trees" and onto the "forest", instead.  So we can all get more done.

I don't know about you, but if I had to teach someone to swing a baseball bat, I know which language *I'd* choose.



## A less contrived example

My present paying job involves supporting a large networked information system.  The underlying software system -- involving a half-dozen major components -- is off-the-shelf, but has been heavily customized through data, configuration, and custom code.  There are two complete environments -- one for testing, one for production -- and each environment contains about a dozen machines.  All services within each environment have redundant copies on separate machines, to ensure maximum uptime.

When new customizations are to be deployed into the system, it generally involves copying files around the network, and running up to hundreds of commands on up to a dozen machines, all in a particular order determined by exactly what is being deployed.  Some changes require service restarts, and some service restarts must cascade to other services.

Needless to say, this kind of thing involves a lot of error-prone work, if it's done by hand.  And getting it back out again -- should the need arise -- often proves even more difficult, as the undeployment process is generally less well tested (being complex, and not on the "critical path"; at least, not until it becomes critical).

So, to address this situation I built a deployment system that leverages several "little" languages to address different aspects of the problem, and brings them together to provide completely automated deployments *and* undeployments.  And, unlike the manual undeployments of the past, the automated ones are *reliable*.

I had three goals in mind when designing the control languages for this system:

1. minimizing the work necessary to build a deployment script (the most common activity)
3. ensuring the effects of every deployment script could be completely reversed *without* requiring planning or additional input from the script writer (so it couldn't be screwed up)
2. isolating the deployment script writer from the details of the system topology (which varied from environment to environment, and could be changed at any time)

These design goals are important for more than just usability reasons: if the scripting language requires a lot of thinking, or a lot of work to use, errors will occur more often.  And, in this instance, errors directly impact the reliability of production systems, and overall uptime.

So, the finished system provides one little language for writing deployment scripts, a second for describing the system topology and component relationships, and a third for controlling the deployment system itself.

The deployment scripting language provides primitives that do atomic units of deployment (things like: create a policy, delete a policy, update a filesystem directory, modify a particular configuration file in a particular way, etc.).  You write the deployment script as if all of the underlying systems exist on one machine, as if nothing ever goes wrong, and as if nothing ever needs to be undeployed.  You simply put the directives in the right order for their inter-dependencies, and provide them with whatever data they need.

When the time comes, the system reads in the deployment script, combines it with the topology and relationship information from the configuration file (the second language) and does all the work of getting files to the right place at the right time, taking backups of the data that's about to change, generating the necessary shell commands, restarting services, and monitoring for errors.  And, should the deployment fail, the undeployment command takes the *exact* same deployment script, and uses the configuration information and the backups to figure out how to reverse the order in a way that respects dependencies, and undoes everything that has been done.

As a result of this language-based approach, a reliable deployment script can be built in a couple of minutes, and freely deployed and undeployed in any configured environment in the minimum time.  And by separating the concerns of system topology and primitive operation from the specific deployment script, a large pool of risk is removed from individual updates.  Once the configuration of a system is correct, any correct deployment script will run correctly on that environment.  And once a new primitive is known to work properly, it will work properly in any deployment script that uses it.

Could these benefits have been achieved without developing new programming languages?  No.  In the end, the solution described here *is* a language-based solution.  The details could have changed -- the deployment script and system configuration could have been written in XML instead of a custom language -- but, from a conceptual standpoint, you'd still have had the same two languages.  The only difference would have been in the amount of noise the programmer would have had to deal with when reading and writing those languages.




## The truth about programming languages

**The truth is that the points I started out with are both myths:**  designing a programming language does not require an uber-nerd; and learning a new programming language doesn't require one, either.

The truth is, completely normal, approachable, friendly programmers make new programming languages *every* day.  When somebody designs a new XML structure to communicate something from one application to another, that's a programming language.  When somebody creates a user interface that allows a user to control an application, that's a programming language.

And the value of these high-level and *domain specific* programming languages is that they let you focus on a specific aspect of a problem, in terms that are natural to that domain.  Describe to me in English how you would deploy this set of updates into the system.  Don't worry about how many instances of the service exist in this particular environment, or what machines they are on; don't worry that any time you update a policy, you need to take a copy of the old one so you can undeploy later; don't worry that in the test environment, restarts can take services completely down, but in production, service must be maintained.  Give me the high level details, formalize it a tiny bit, and here's your deployment script.  Assume the system can figure out the rest.  Please!

That's the power of a language.



## The cost of generality

Programming languages like Java and C -- and all of the "commodity" general-purpose programming languages, in fact -- are *low-level* languages.  They are generally useful specifically because they demand you provide so much detail: by shifting the burden onto the programmer, they can be used to solve just about any problem.  But by assuming so very little, such languages require programmers to write tons of (often repetitive) code, just to get anything done.

Low-level languages do, of course, generally offer a way to package runs of logic into re-usable chunks (Java's class libraries, for instance).  These facilities allow you to leverage the work of other programmers, and can certainly be very powerful.  But their "shape" is ultimately constrained by the language they were designed for.  It takes new languages to allow new shapes, and to make them feel natural enough to use.  Ruby's closures define a new shape, and they are ubiquitous in Ruby code.  The inversion of control completely transforms how you think about and write Ruby code.  Java's anonymous classes, OTOH, try to offer the same services within the existing shape of the language, and inflict such pain in doing so, that they get only limited use.

New languages allow new ways to think, and that is often exactly what is needed to make leaps in productivity.



## Conclusion

I could go on.  But I won't.  ;-)

Here's my point of view: computers are good at doing boring, predictable, repetitive stuff, and *we* aren't.  And for anything but the simplest of problems, languages are a necessary tool for shifting that burden from people to computers.

It all comes back to Norman's Law of Conservation of Complexity: give people better tools, and they'll do more with them.

It's time we had better tools.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>53</wp:post_id>
<wp:post_date>2008-01-23 03:35:27</wp:post_date>
<wp:post_date_gmt>2008-01-23 07:35:27</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>why-bother-creating-new-programming-languages</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1296982864</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>26</wp:comment_id>
<wp:comment_author><![CDATA[The Disco Blog &raquo; Blog Archive &raquo; The weekly bag&#8211; Feb 1]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://thediscoblog.com/2008/02/02/the-weekly-bag-feb-1/</wp:comment_author_url>
<wp:comment_author_IP>216.246.11.148</wp:comment_author_IP>
<wp:comment_date>2008-02-02 10:08:20</wp:comment_date>
<wp:comment_date_gmt>2008-02-02 15:08:20</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[&nbsp;.&nbsp;.&nbsp;.&nbsp;] Why bother creating new programming languages?- some interesting thoughts on DSLs. [&nbsp;.&nbsp;.&nbsp;.&nbsp;]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>100</wp:comment_id>
<wp:comment_author><![CDATA[Jeff Brown]]></wp:comment_author>
<wp:comment_author_email>jeff.brown@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://blog.bits-in-motion.com/</wp:comment_author_url>
<wp:comment_author_IP>173.117.95.4</wp:comment_author_IP>
<wp:comment_date>2009-01-06 05:02:46</wp:comment_date>
<wp:comment_date_gmt>2009-01-06 09:02:46</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Nice post but I'd like to hear much more about your deployment DSL.&nbsp; I'm planning to build one myself and I'd rather not reinvent the wheel.&nbsp; :-)</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>No actions in the grammar</title>
<link>http://rcc.courage-my-friend.org/discussions/concepts/articles/concepts-no-actions-in-the-grammar/</link>
<pubDate>Fri, 25 Jan 2008 09:27:47 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Concepts]]></category>

		<category domain="category" nicename="concepts"><![CDATA[Concepts]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/articles/2008/01/25/concepts-no-actions-in-the-grammar/</guid>
<description></description>
<content:encoded><![CDATA[The first thing you should know about the RCC grammar description language is that action code is not embedded in the grammar.  This differs greatly from systems like yacc and ANTLR, which essentially overlay a macro layer on a source file in the output language.  I'm pretty big on separation of concerns -- I think it's a very important design strategy, especially when it comes to anything complex.  When you put too much stuff in one place, you start to lose the forest in the trees, and that restricts comprehension and usability.

## The case against action code

Have a look at a [real-world ANTLR grammar](http://fisheye.codehaus.org/browse/groovy/trunk/groovy/groovy-core/src/main/org/codehaus/groovy/antlr/groovy.g?r=10540) (thanks to [Guillaume](http://glaforge.free.fr/weblog/) for the link).  Go ahead -- I'll wait.

Done?

Now, let's say you are one of the developers responsible for that grammar, and you have a source file that isn't parsing the way you expect.  Where the hell do you start in all that?  Frankly, I'm pretty good at finding bugs, just by reading the code; but finding a bug in that grammar?  Not something I'd want to have to do.

And, worse, what if you're just a regular user of the language, trying to figure out if it is your understanding or the compiler that is wrong?

If your grammar contains actions, then your grammar is *implementation*.  It's no longer just a specification.  And that's a very bad thing, because it means you have to maintain a specification separately.  Eventually, inevitably, the two are going to get out of synch, and then which one do you believe?


## But then how do you . . . ?

Of course, systems like yacc and ANTLR have a reason for putting action code right in the grammar: it is the easiest way to get custom processing into a generated parser.  And that custom processing can be very important -- it generally does useful stuff like build an AST, or manage variable names.

RCC takes a different approach.  First, it attempts to generate a lot more stuff for you -- including your AST.  This eliminates one of the primary uses of action code.  And second, it generates (in any language that will support it) an OO parser.  Hooks in the base class call methods at specific points during the parse, and all you have to do to "add" action code is to subclass the parser -- in your implementation language -- and fill in the methods you care about.  I first saw this used in [SableCC](http://sablecc.org/), and I loved the idea, so I've totally stolen it for RCC.

That said, RCC does not support (and probably can't even be action-ed to support) changing the parse based on the variable type of an identifier.  ANTLR's action-code-in-the-parser can do this, and so this is a place RCC's approach may prove less than ideal.  Even if it proves true (I'm not presently sure -- I haven't thought it out against the latest version of the code), it's a tradeoff I'm willing to make, given that such a modification of the parse could significantly complicate (or just plain break) error-recovery and other useful features of the system.  In the end, I'm not convinced doing symbol table stuff during lexing and/or parsing is a great idea, but if you are, RCC may not be a good choice for you.


## Conclusion

However, even with that trade off, I think RCC is still plenty capable.  And its grammars are certainly a lot easier to read than others I've seen.

Okay, I think that's it for now.  Next time, I'll go over the basic grammar syntax . . . .]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>56</wp:post_id>
<wp:post_date>2008-01-25 05:27:47</wp:post_date>
<wp:post_date_gmt>2008-01-25 09:27:47</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>concepts-no-actions-in-the-grammar</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>About</title>
<link>http://rcc.courage-my-friend.org/about/</link>
<pubDate>Tue, 29 Jan 2008 10:53:47 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false"></guid>
<description></description>
<content:encoded><![CDATA[[Courage, My Friend](http://courage-my-friend.org) is the personal website of [Chris Poirier](http://courage-my-friend.org/about-chris-poirier/).  [RCC](http://rcc.courage-my-friend.org) is a LALR(1) parser-generator, written in Ruby, which aims to simplify the construction of quality language processors.

RCC is the result of seven months of my obsessive nature.  Either the system kicks ass, or it's entirely irrelevant to the real world -- too early to say which.  ;-)
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>2</wp:post_id>
<wp:post_date>2008-01-29 05:53:47</wp:post_date>
<wp:post_date_gmt>2008-01-29 10:53:47</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>about</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Project Info</title>
<link>http://rcc.courage-my-friend.org/index/</link>
<pubDate>Tue, 29 Jan 2008 12:10:16 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/starting-points/</guid>
<description></description>
<content:encoded><![CDATA[* [Feature List](/feature-list/)
* [Project Introduction](/articles/2008/01/18/introduction/)
* [Concept Discussions](/articles/by-category/discussion/concepts/)

**Release date**: maybe February 2008.  I'm currently refactoring everything so the RCC grammar is parsed by an RCC-generated parser.  And the scope has crept a little.

**Update**: rafactoring is complete on the two most impacted layers of the compiler.  Two remain.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>3</wp:post_id>
<wp:post_date>2008-01-29 07:10:16</wp:post_date>
<wp:post_date_gmt>2008-01-29 12:10:16</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>index</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1218919257</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>RCC Feature List</title>
<link>http://rcc.courage-my-friend.org/feature-list/</link>
<pubDate>Tue, 29 Jan 2008 12:41:36 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/feature-list/</guid>
<description></description>
<content:encoded><![CDATA[RCC is a LALR(1) compiler compiler, written in Ruby, and supporting (theoretically) any output language. 

Declarative grammar:

* grammar is purely declarative and is therefore output-language-independent
* parser is generated as a class, and action code is added by subclassing and defining "event handler" methods

Generated components include:

* lexer
* parser
* AST classes
* AST construction code
* error recovery system
* grammar help system

Additional features:

* optional backtracking support, for dynamic resolution of ambiguous grammars
* error recovery system in generated parser that engages when a syntax error is detected:
  * allows parsing to continue beyond the first error
  * provides user with higher-quality error messages, that are more likely to identify the *cause* of an error, and not just its *effect*
  * error report includes suggested repairs for the error

Debugging tools:

* a grammar interpreter that explains how your grammar actually works on a particular source file, including clear descriptions of *why* it is making the choices it is making


]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>68</wp:post_id>
<wp:post_date>2008-01-29 07:41:36</wp:post_date>
<wp:post_date_gmt>2008-01-29 12:41:36</wp:post_date_gmt>
<wp:comment_status>closed</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>feature-list</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Example Grammar</title>
<link>http://rcc.courage-my-friend.org/discussions/general/articles/example-grammar/</link>
<pubDate>Tue, 05 Feb 2008 06:49:42 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[General]]></category>

		<category domain="category" nicename="general"><![CDATA[General]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/articles/2008/02/05/example-grammar/</guid>
<description></description>
<content:encoded><![CDATA[I don't have time to post a full article tonight, but I'd like to get something up for you all to look at.  So here is a sample RCC grammar file to look at.  It is, in fact, the RCC description of its own grammar language.  I'll break it down in an article tomorrow.

**[UPDATE]: I've corrected a couple of typos and introduced a couple of new efficiencies since I posted this last night.  It's amazing what posting something in public does for your perspective.**

<pre><code>

grammar RCC

   start_rule system_spec
   ignore     whitespace
   ignore     comment
   enable     backtracking

   strings
      any_character     => [\u0000-\uFFFF]
      digit             => [0-9]
      hex_digit         => [{digit}a-fA-F]

      unicode_sequence  => '\\' 'u' hex_digit hex_digit hex_digit hex_digit
      escape_sequence   => '\\' [a-z\\\-\[\]\']
      general_character => [{any_character}]-['\n\r\\]
      general_text      => general_character+
      property_text     => [{general_character}]-[}]+

      word_first_char   => [a-zA-Z_]
      word_char         => [{word_first_char}{digit}]
      word              => word_first_char word_char*

      eol               => '\n'
      whitespace        => [ \t\r]+
      comment           => '#' [{any_character}]-[\n]*
   end

   macros
      statement         => %% eol+ ;
      block( header )   => statement() [ statement() [$header] %% 'end' ]
   end


   section grammar
      system_spec  => grammar_spec+
      grammar_spec => block('grammar' word:name) [ option* specification* ]

      group option
         start_rule          => statement() [ 'start_rule' word:rule_name        ]
         ignore_switch       => statement() [ 'ignore'     word:name             ]
         backtracking_switch => statement() [ 'enable'     'backtracking'        ]
         pluralization_guide => statement() [ 'pluralize'  word:name word:plural ]
      end

      group specification
         macros_spec     => block('macros')              [ macro_spec*           ]
         strings_spec    => block('strings')             [ string_spec*          ]
         precedence_spec => block('precedence')          [ precedence_level*     ]
         section_spec    => block('section' word:name)   [ specification*        ]
         group_spec      => block('group' word:name)     [ (rule_spec|group_spec|spec_reference):specification* ]
         rule_spec       => statement() [ word:name '=>' expression directive* ] transformation_spec*
      end
      
      spec_reference   => statement() [ word:name ]
      precedence_level => statement() [ word:reference+ ]

   end
   

   section strings_spec
      string_spec => statement() [ word:name '=>' string_pattern:definition ]

      group string_pattern
         sp_reference  => word:name
         sp_group      => '(' string_pattern ')'
         sp_branch     => string_pattern '|' string_pattern          @associativity=left
         sp_concat     => string_pattern string_pattern              @associativity=left
         sp_repeated   => string_pattern ('*'|'+'|'?'):repeat_count
         string        => '\'' (unicode_sequence|escape_sequence|general_text)+ '\''
         character_set
      end

      group character_set
         cs_characters => '[' cs_element+ ']'
         cs_difference => character_set:lhs '-' character_set:rhs   @associativity=none
      end
      
      group cs_element
         cs_range      => character:from '-' character:to           @associativity=none
         cs_reference  => '{' word:name '}'              
         character                              
      end

      group character
         unicode_sequence
         escape_sequence
         general_character
      end
   end


   section rule_spec
      macros
         labelled()          => %% (':' word:label)?
         attribute_set(name) => '@' $name '=' %%
      end

      group expression
         reference_exp   => labelled() [ word:name            ]
         string_exp      => labelled() [ string               ]
         variable_exp    => labelled() [ '$' word:name        ]
         group_exp       => labelled() [ '(' expression ')'   ]
         
         sequence_exp    => expression:tree expression:leaf            @associativity=left
         branch_exp      => expression:tree '|' expression:leaf        @associativity=left
         repeated_exp    => expression ('*'|'+'|'?'):repeat_count
         gateway_exp     => '!' !whitespace word
         recovery_commit => ';'
         transclusion    => '%%'
         macro_call      => word:macro_name !whitespace '(' parameters? ')' ('[' expression:body? ']')?
                         ** @parameters = @parameters/(expression|parameter_tree/(@tree|@leaf)//)         
      end

      group parameters
         parameter_tree  => parameters:tree ',' parameters:leaf      @associativity=left
         expression
      end

      group directive
         associativity_directive => attribute_set('associativity') [ ('left'|'right'|'none'):direction ]
      end
      
      precedence
         repeated_exp
         branch_exp
         sequence_exp
      end
   end

   
   section transformations_spec
      group transformation_spec
         assignment_transform => statement() ['**' npath:destination '='  npath:source ]
         append_transform     => statement() ['**' npath:destination '+=' npath:source ]
      end

      group npath
         npath_self_exp       => '.'
         npath_type_exp       => word:type_name
         npath_slot_exp       => '@' word:slot_name
         npath_recurse_exp    => npath '//'
         npath_path_exp       => npath:tree '/' npath:leaf   @associativity=left
         npath_branch_exp     => npath:tree '|' npath:leaf   @associativity=left
         npath_group_exp      => '(' npath ')'
                              ** . = @npath
      end

      precedence
         npath_path_exp
         npath_branch_exp
      end
   end
   

   section macros_spec
      macro_spec => statement() [ word:name (!whitespace '(' parameter_defs? ')')? '=>' expression ]
                 ** @parameter_defs => @parameter_defs/(word|parameter_def_tree/(@tree|@leaf)//)
      
      group parameter_defs
         parameter_def_tree => parameter_defs:tree ',' parameter_defs:leaf   @associativity=left
         word
      end
   end

end

</code></pre>

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>70</wp:post_id>
<wp:post_date>2008-02-05 01:49:42</wp:post_date>
<wp:post_date_gmt>2008-02-05 06:49:42</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>example-grammar</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Introduction to RCC Grammars</title>
<link>http://rcc.courage-my-friend.org/discussions/usage/articles/introduction-to-rcc-grammars/</link>
<pubDate>Thu, 07 Feb 2008 05:56:49 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Usage]]></category>

		<category domain="category" nicename="usage"><![CDATA[Usage]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/articles/2008/02/07/introduction-to-rcc-grammars/</guid>
<description></description>
<content:encoded><![CDATA[When building an RCC grammar, you will be focussing on two primary things: 

* describing lexical elements (keywords, operators, names, etc.)
* describing grammatical structures (rules about how lexical elements combine to create meaning)

In addition to these basic elements, RCC also needs you to describe the Abstract Syntax Tree that will be built when a source file is processed by your grammar.  Most of this is done by implication -- there will be one class for each rule, with fields named for each of the non-constant terms.  However, you can override the default naming behaviour -- and even some of the structural composition -- by providing field labels to terms in your rules; and, for special needs, you can include an XPath-style description of how to restructure the AST after it has been constructed, for times when a simple tree isn't what you'd like to work with after processing is complete.

For the sake of this discussion, I'm going break down the [RCC grammar](/articles/2008/02/05/example-grammar/) itself.  It makes use of most of the language, so it will be a good example to work from.


## Basic Organization

There's a fair amount of flexibility in how you organize your grammar, but, in general, there will be three major chunks:

* options
* string definitions
* grammar rules


### Options

Options allow you to enable backtracking support in the grammar, specify which lexical symbols should be ignored by the parser (whitespace, for instance), and specify which of the grammar rules to start from.


## String Definitions

In general, RCC tries to let you work in a way that's natural for you.  For things like keywords and operators, you can specify them right in the grammar rules, where they make sense.  In fact, if you do this, such constant strings won't even be written into your AST, which is usually what you want (you can override this behaviour by specifying a label).

However, for strings that are recognized by pattern -- numbers, identifiers, strings, etc. -- you'll need to define them before using them.  You will then reference the pattern by name:

<pre><code>
strings
   any_character     => [\u0000-\uFFFF]
   digit             => [0-9]
   hex_digit         => [{digit}a-fA-F]

   unicode_sequence  => '\\' 'u' hex_digit hex_digit hex_digit hex_digit
   escape_sequence   => '\\' [a-z\\\-\[\]\']
   general_character => [{any_character}]-['\n\r\\]
   general_text      => general_character+
   property_text     => [{general_character}]-[}]+

   word_first_char   => [a-zA-Z_]
   word_char         => [{word_first_char}{digit}]
   word              => word_first_char word_char*

   eol               => '\n'
   whitespace        => [ \t\r]+
   comment           => '#' [{any_character}]-[\n]*
end
</code></pre>

Within the strings section, you can specify patterns in terms of character ranges (`[0-9]`), escape sequences (`\n`), and strings (`'abc'`) -- or any sequence thereof.  Individual elements can be repeated with `?`, `*`, or `+` markers, which indicate 0 or 1 occurrences, 0 or more occurrences, or 1 or more occurrences, respectively.  Additionally, you can subtract one character range from another to take a subset of its characters (`[abc]-[b]`); within a character range, you can refer to other character ranges by name (`[{any_character}]`).

RCC will use these definitions -- and any constant strings you specify in the rules -- to create your lexer.  Strings defined earlier in the grammar generally take precedence over ones defined later, if there is an conflict.  *However*, RCC will automatically prioritize strings appropriately for the parsing context, so you don't have to worry about defining very general strings (like `general_text`, above).  They will only get used when they are relevant.

Reread that last paragraph.  It's important.



## Rule Definitions

Rules are where you the structure of your grammar.  RCC allows you a good degree of freedom in how to specify them.  You can specify alternate paths through a rule (`x a|b|c y`), make elements optional or repeated (with `?`, `*`, or `+`), and group sets of elements into complex structures (`x (a b)|(c d) y`).  

Of course, with great freedom comes great responsibility, and these features are best used in moderation.  In most cases, if you have two different forms to parse, you should use two separate rules to do so.  But the power is there, when you need it.


### A Simple Rule

<pre><code>
system_spec => grammar_spec+
</code></pre>

Here's a very simple rule that defines every `system_spec` parse as made up of one or more `grammar_spec` parses.  

Let's take a moment to discuss the AST produced by this rule.  I'll use Ruby examples, but RCC is perfectly capable of producing similar structures in other languages, and will even attempt to follow the naming conventions of those other languages.

In this case, on return from the parse of this rule, you will receive an object of class `SystemSpec`.  This object will have one property: `grammar_specs`, which will contain a list of `GrammarSpec` objects.  

Unless labelled, AST property names are taken directly from the corresponding terms within a rule.  Had the rule been `system_spec => grammar_spec`, for instance, the property would have been `grammar_spec` and would have held exactly one `GrammarSpec` object.  In the case of repeated elements, however, RCC pluralizes the term and stores in it a list of the parsed objects.  

Internally, plural elements are processed using a rule of the form `grammar_specs => grammar_specs? grammar_spec`, producing a lopsided binary tree of grammar_spec objects.  RCC then uses the AST rewriting system to unpack this tree and convert it to a list instead.  When you use `*` or `+` markers on your rule terms, you get all of this work for free.



### Macros

Before getting to the next example, I'd better tell you about macros.

When defining a grammar, you will often come across structures that get regular use.  For instance, when defining rules that make up the "statements" of your language, you may find that many of them end with the same statement terminator.  Other "statements" might have a block structure that involves something more complex, but still regular.  

In some cases, you will deal with this by building a rule that captures that structure and symbolically references all of the instances that use it.  This may even be the best way to do it, in some grammars.  However, in other grammars, it will unnecessarily complicate things.  Continuing the "statement" example, a high-level rule that captures the statement terminator would prevent you from having statements that can occur only in specific situations, as all terminated statements would have to be referenced by the one name.  And, at the other end of things, the produced AST would have an additional layer that may have no useful meaning. 

To solve this problem, RCC allows you to define macros that can be called to wrap structure around the unique elements of your rule.

<pre><code>
macros
   statement         => %% eol+ ;
   block( header )   => statement() [ statement() [$header] %% 'end' ]
end
</code></pre>

The first macro is used to append the terms `eol+` `;` to whatever is passed as the macro's body.  The second macro is used to construct a block statement from a header and the macro's body.  Both of the statements in each of the following sets has the same meaning:

<pre><code>
simple_statement  => statement() [ x y z ]
complex_statement => x y z eol+ ;

simple_block      => block( 'grammar' word:name ) [ option* specification* ]
complex_block     => 'grammar' word:name eol+ ; option* specification* 'end' eol+ ;
</code></pre>

Macros can help keep your code from getting cluttered with terms that are lexically important, but that have no additional meaning.  RCC will take care of "flattening" things out for processing.


### Groups

<pre><code>
grammar_spec => block('grammar' word:name) [ option* specification* ]

group option
   start_rule          => statement() [ 'start_rule' word:rule_name        ]
   ignore_switch       => statement() [ 'ignore'     word:name             ]
   backtracking_switch => statement() [ 'enable'     'backtracking'        ]
   pluralization_guide => statement() [ 'pluralize'  word:name word:plural ]
end

group specification
   macros_spec     => block('macros')              [ macro_spec*           ]
   strings_spec    => block('strings')             [ string_spec*          ]
   precedence_spec => block('precedence')          [ precedence_level*     ]
   section_spec    => block('section' word:name)   [ specification*        ]
   group_spec      => block('group' word:name)     [ (rule_spec|group_spec|spec_reference):specification* ]
   rule_spec       => statement() [ word:name '=>' expression directive* ] transformation_spec*
end

spec_reference   => statement() [ word:name ]
precedence_level => statement() [ word:reference+ ]

</code></pre>

Often times, you will find yourself wanting to refer to a group of rules by the same name.  In the example above, the `grammar_spec` is made up of 0 or more `option`s followed by 0 or more `specification`s.  However, there are a number of different options available in RCC, and a number of different types of specifications.  This is where the group comes in.  It allows you to apply a single name to one or more rules, so you can reference them *en masse*.

For the sake of convenience, you can define rules directly in groups, as has been done in this example.  However, there is no requirement that you do so.  You can define all your rules outside of any group, and then just list the rule names within the appropriate groups, later on, to indicate membership.  And a rule can be in any number of groups.  You can even nest groups and/or use group names inside of other groups.  Finally, groups can also contain string names -- not just rule names.

When it comes to your AST, properties names are drawn (as always) from the term in the rule.  As such, if you use a group name in a rule, the property will be named for the group, not for its individual elements.  If this is not what you want, you can get around it by specifying the group members inline using a branch structure (`(a|b|c)` instead of `group_abc`).


### Term Labels

Something else you'll notice in the above example is that some terms have been labelled.  For instance:

<pre><code>
start_rule => statement() [ 'start_rule' word:rule_name ]
</code></pre>

In this example, the label `rule_name` has been applied to the `word` term, which means the `word` parsed by that term will be stored in an AST property called `rule_name` instead.

By default, constant strings within a rule are not copied into the AST -- under the assumption that if they are constant, you don't need them.  However, if you to want them copied, you can simply give the string a label, and it will be stored.  Also by default, if two terms reference the same rule, RCC will ensure unique property names by appending a number to the default name (`expression_1`, `expression_2`).  You can override this behaviour with a label.


### Error Recovery Hints

RCC organizes its error recovery system around rules.  When an error is encountered in a source file, the generated parser will focus its efforts on finding a rule boundary at which to modify things to repair the error, and will not consider the error repaired until a rule completes.  Unfortunately, this is not always the best choice.  If a rule may cover a lot of the source text (a higher-level rule like a function or a class definition), then the recovery may be complete long before the error recovery system notices, and that can lead to a lot of churn.  You can tell the error recovery system to treat an error as recovered *before* reaching the end of a rule by using the recovery commit marker (`;`) within your rule.  Used carefully, recovery commit markers should produce better error recovery behaviour.



## That's Enough For Now

Okay, that's enough for one night.  I hope this gives you a good introduction to the RCC grammar language, and RCC's way of thinking.  In part 2, I'll go over sections, associativity, precedence, and anything else I didn't get to in this article.

G'night.



]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>71</wp:post_id>
<wp:post_date>2008-02-07 00:56:49</wp:post_date>
<wp:post_date_gmt>2008-02-07 05:56:49</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>introduction-to-rcc-grammars</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1207315552</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Context-sensitive lexing</title>
<link>http://rcc.courage-my-friend.org/discussions/concepts/articles/context-sensitive-lexing/</link>
<pubDate>Wed, 13 Feb 2008 22:29:59 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Concepts]]></category>

		<category domain="category" nicename="concepts"><![CDATA[Concepts]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/articles/2008/02/13/context-sensitive-lexing/</guid>
<description></description>
<content:encoded><![CDATA[I'm going to take the opportunity to elaborate on something I mentioned in [Introduction to RCC Grammars](http://rcc.courage-my-friend.org/articles/2008/02/07/introduction-to-rcc-grammars/)): *RCC-generated lexers are context-sensitive.*

Specifically, RCC generates a whole set of lexers for you, one for each parser state.

Why should you care?  Well, because it means that RCC can handle declaratively what you might have had to do with custom code in the past; things like: 

* escape sequences inside strings
* expressions nested inside strings
* regular expressions literals
* etc.

In other words, RCC makes it easy to embed sub-languages in your grammar.  As long as you don't expect the same string of characters to be lexed in two ways in the same position within your grammar, RCC will ensure that it is lexed in the way that is appropriate for the context.  (And you can get past that other restriction by enabling backtracking within the generated parser.)

Consider this Ruby-like expression: 

<pre><code>
puts "Confirmed guests: {confirmed_guests.join(", ")}."
</code></pre>

An RCC grammar like this could process it:

<pre><code>
group expression
   addition_expression    => expression '+' expression  @associativity=left
   subtraction_expression => expression '-' expression  @associativity=left
   
   # . . . additional expression rules left as an exercise for the reader . . . 
   
   string_expression
end

section strings
   strings      
      escape_sequence => '\\' [rtn\\"{]
      general_text    => [\u0000-\uffff]-["\\{]+
   end
   
   string_expression => '"' (escape_sequence|general_text|nested_expression):element* '"'
   nested_expression => '{' expression '}'
end
</code></pre>

It is safe to define a string like `general_text` (which would match just about any text in a source file), because it will only ever be used inside a string_expression (in this grammar, anyway).  And because the opening `{` of a nested expression is excluded from `general_text`, any such `{` inside a `string_expression` will trigger a shift into `nested_expression`.

Finally, because RCC generates an LR parser, you can still use `}` and even `string_expression`s inside `expression` without causing a problem, because the parser only considers reductions at the top of the stack.  In other words, a `}` will not cause a reduce of the `nested_expression` until the top of the stack matches `'{' expression '}'` in a state where `nested_expression` is expected.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>73</wp:post_id>
<wp:post_date>2008-02-13 17:29:59</wp:post_date>
<wp:post_date_gmt>2008-02-13 22:29:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>context-sensitive-lexing</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update/</link>
<pubDate>Mon, 18 Feb 2008 08:41:31 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/articles/2008/02/18/status-update/</guid>
<description></description>
<content:encoded><![CDATA[It's been a good weekend!  I've made a *ton* of progress implementing the new description language.

FYI, the compiler is split into 4 layers: the Parser; the Model; the Plan; and the Code Generator.  At this point, the Parser and the vast majority of the Model have been rewritten to support the new description language.  Changes to the Plan will be mostly refactoring, to link up the old code to the new Model.  The Code Generator needs to be updated with the error recovery system and support for the new AST features.  That said, I think the Parser and Model rewrite comprise the majority of the work, which is now finished.

In particular, the "+" and "*" operators both work for terms and phrases in rules (a totally new feature), and slot naming works reliably in both singular and plural contexts.  Macro support is also working, as is the new unicode support in the lexer.  

I may still have a little bit of work to do in the interpreter -- to ensure the output matches the input grammar -- but the new model keeps enough information from the AST that, even without that work, the interpreter output should still make sense.

So, there you have it.  I might even have the interpreter back on its feet this week, time allowing.  Yay!

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>74</wp:post_id>
<wp:post_date>2008-02-18 03:41:31</wp:post_date>
<wp:post_date_gmt>2008-02-18 08:41:31</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>What is RCC?</title>
<link>http://rcc.courage-my-friend.org</link>
<pubDate>Sun, 09 Mar 2008 19:15:26 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/what-is-rcc/</guid>
<description></description>
<content:encoded><![CDATA[[RCC](http://rcc.courage-my-friend.org) (short for [Ruby Compiler Compiler](http://rcc.courage-my-friend.org)) is a compiler construction system, written in Ruby, which aims to simplify the construction of quality language processors.

With RCC:

1. Describe your grammar in a flexible, declarative, action-free language.
1. Generate your lexer, parser, and AST in any modern language.
1. Easily produce quality error messages during parsing, for a better user experience.
1. Understand exactly how your grammar processes any source file, with RCC's debugging tools.

For more information, see the [complete feature list](/feature-list/), or have a look around.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>75</wp:post_id>
<wp:post_date>2008-03-09 14:15:26</wp:post_date>
<wp:post_date_gmt>2008-03-09 19:15:26</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>what-is-rcc</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>text-and-articles.php</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>Articles Heading</wp:meta_key>
<wp:meta_value>Recent Articles</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>Articles Query</wp:meta_key>
<wp:meta_value>showposts=3</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1224836021</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update-2/</link>
<pubDate>Mon, 10 Mar 2008 08:46:35 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/announcements/articles/status-update-2/</guid>
<description></description>
<content:encoded><![CDATA[Well, as you can see, I've redesigned the website.  The old layout was horrid.  Hopefully, the new layout will work better.  That said, expect broken links for the next few days, while I finish up the templates and fill in the content.  Note that I've changed the URL structure for the site.  All your old links should still work.  Let me know if any don't.  And if you are an IE user (why?), I apologize: I don't have the ability to test the site in IE 7, and I know it looks horrid in IE 6 (and I don't care).  

As for the compiler itself, refactoring of the Plan is more than half finished.  As part of that effort, I've completely rewritten the precedence system, to eliminate a bunch of old bugs.  I'm now working on the state-table generation code, and hope to finish it up early this week.  If so, it's down to the interpreter and code generation systems.

I'll admit to being disappointed that I wasn't able to release the system by the end of February, but such is life (and the cost of having a paying job).  Still, unless I get hit by a truck, or something, it will be out the door this month.

Until next time . . . .

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>76</wp:post_id>
<wp:post_date>2008-03-10 03:46:35</wp:post_date>
<wp:post_date_gmt>2008-03-10 08:46:35</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-2</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Introduction to RCC Error Recovery</title>
<link>http://rcc.courage-my-friend.org/discussions/concepts/articles/introduction-to-rcc-error-recovery/</link>
<pubDate>Sat, 22 Mar 2008 17:06:24 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Concepts]]></category>

		<category domain="category" nicename="concepts"><![CDATA[Concepts]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/discussions/concepts/articles/introduction-to-rcc-error-recovery/</guid>
<description></description>
<content:encoded><![CDATA[***NOTE:** This is an excerpt from the in-code documentation of the parser.  I thought I'd post it as an introduction on how error recovery works in RCC.  I'll add examples later.*

Error recovery in rcc involves trying to alter the token stream in order to produce a valid parse.  This is 
predicated on the idea that the user isn't trying to produce bad code -- that the errors are, in fact, accidents.

We can alter the token stream in three ways: by inserting a token; by replacing a token; or by deleting a token.
Generally speaking, we trust deletion the least, as users are lazy: they don't generally do work they didn't think 
they needed.  As a result, we try deletions last.  Replacing a token is something we trust a little more, but only 
if the replacement token can be considered lexically similar to the one that was already there.  For instance, we 
might replace "++" with "+" to produce a valid parse, or the identifer "fi" with the keyword "if"; but we should not 
arbitrarily replace keyword "class" with operator "*", as it is unlikely the user meant one and typed the other.
We rely on machinery in Token for this comparison.  Finally, insertion of a token is our favourite choice.  It seems
far more likely that a user forgot to type something, than typed something extra.

The parser works with a "stack" of position markers (it is maintained as a linked list, but behaves like a stack).
Shift actions create new positions at the head of the stack, and Reduce actions remove one or more positions from
the stack and replace them with a new position.  RCC limits its error recovery attempts to positions currently
on the position stack.  This generally means that token stream modifications start at the error position, then 
jump larger and larger distances back through the source text, looking for ways to fix the token stream.  The idea 
is that there is no point error correcting stuff that has already matched productions, unless as the result of a 
upstream token change.  Let's consider a Ruby example: imagine that we have a dozen lines of valid code processed and reduced to statements, then encounter an unexpected "end" marker.  It is unlikely all of that valid code needs reinterpretation.  It parsed right once; changing it is only likely to break it.  The user may have put the extra "end" in by accident; or they may have forgotten a "begin" before one of those valid statements; or they may have forgotten a "class <name>" or something similar at the very top of the file.  By error correcting only at positions still on the stack, we conveniently leap to those suspicious points. 

Fortunately, at any given position there are a limited number of token stream changes we can make without 
immediately creating a new error.  These are the supported lookahead types from the position's State's action set.  
We error correct by inserting/replacing to one of these, or by deleting the next token and seeing what happens.
And, for obvious reasons, we *never* do anything if the lookahead token is one the error correction system itself
created.

*more to come*]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>77</wp:post_id>
<wp:post_date>2008-03-22 12:06:24</wp:post_date>
<wp:post_date_gmt>2008-03-22 17:06:24</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>introduction-to-rcc-error-recovery</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update-3/</link>
<pubDate>Mon, 24 Mar 2008 10:18:01 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/announcements/articles/status-update-3/</guid>
<description></description>
<content:encoded><![CDATA[Just a quick update today.  The Plan is done (yay!), and I've started on the Interpreter and Code Generation layer.  I've got basic Unicode support working, and I'm now implementing the other new Lexer features.

I've decided to put streaming capabilities into the system, as they might prove useful and don't require a lot of extra work.  In the past, the parser has read in the entire source file before doing anything with it, then processed it in one go.  Streaming will allow it to be read in as it is available/needed, and allow elements early in the parse to be discarded via action code.  This will be useful if you are building an interpreter, for instance, as it means you can use the parser to process the source in chunks, after each of which you take the necessary actions and then move on.  The parser will, at that point, not error-correct back into the discarded code, nor will it keep the discarded code in memory.

Until next time . . . .]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>78</wp:post_id>
<wp:post_date>2008-03-24 05:18:01</wp:post_date>
<wp:post_date_gmt>2008-03-24 10:18:01</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-3</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Download</title>
<link>http://rcc.courage-my-friend.org/download/</link>
<pubDate>Thu, 27 Mar 2008 13:48:36 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/download/</guid>
<description></description>
<content:encoded><![CDATA[Coming soon.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>80</wp:post_id>
<wp:post_date>2008-03-27 08:48:36</wp:post_date>
<wp:post_date_gmt>2008-03-27 13:48:36</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>download</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Helping Out</title>
<link>http://rcc.courage-my-friend.org/helping-out/</link>
<pubDate>Thu, 27 Mar 2008 13:49:30 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/helping-out/</guid>
<description></description>
<content:encoded><![CDATA[Contact <cpoirier@gmail.com> if you'd like to help out.   Thanks!]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>82</wp:post_id>
<wp:post_date>2008-03-27 08:49:30</wp:post_date>
<wp:post_date_gmt>2008-03-27 13:49:30</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>helping-out</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1218919925</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update-4/</link>
<pubDate>Mon, 31 Mar 2008 08:05:18 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=83</guid>
<description></description>
<content:encoded><![CDATA[Only a quick update tonight.  The interpreter is parsing again, with full support for groups and gateway expressions.  These are probably the two most major changes to the RCC grammar description language, so that's significant.  I still have to fix up error handling and AST production, but that will have to wait until tomorrow.  Still, YAY!
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>83</wp:post_id>
<wp:post_date>2008-03-31 03:05:18</wp:post_date>
<wp:post_date_gmt>2008-03-31 08:05:18</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-4</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1206950718</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update-5/</link>
<pubDate>Mon, 07 Apr 2008 07:10:09 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=84</guid>
<description></description>
<content:encoded><![CDATA[Well, another week, more progress.  The AST transformation system has been completely redesigned (again), is implemented, and has had some basic testing.  This is a critical step in getting RCC processing grammars, as the internal machinery expects the parsed grammar to be in a transformed state.  

I am now working through a shake-down run of parsing a real grammar and using it to parse an input file in that language.  Yay for meta programming!  The first instance of the interpreter applies the RCC grammar language itself to parse a grammar, which is used to build a second interpreter to read in an actual source file.  Just in case I'm not being clear, the first one was done a week ago, and the second is most of the way there now.

I can see light up ahead, and -- this time -- I'm pretty sure it's not another train!

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>84</wp:post_id>
<wp:post_date>2008-04-07 03:10:09</wp:post_date>
<wp:post_date_gmt>2008-04-07 07:10:09</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-5</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1207552209</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>It&#039;s Alive!!!!</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/its-alive/</link>
<pubDate>Tue, 08 Apr 2008 02:02:43 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=85</guid>
<description></description>
<content:encoded><![CDATA[RCC just loaded a real grammar file (ie. not its own), built a parser from it (using the same machinery it used to build its own parser), and read and correctly processed a program with it.  Yay!]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>85</wp:post_id>
<wp:post_date>2008-04-07 22:02:43</wp:post_date>
<wp:post_date_gmt>2008-04-08 02:02:43</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>its-alive</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1207620163</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>That&#039;s definitely the end of the tunnel</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/thats-definitely-the-end-of-the-tunnel/</link>
<pubDate>Wed, 09 Apr 2008 03:47:25 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=86</guid>
<description></description>
<content:encoded><![CDATA[Error recovery is working.  Haven't tested it much, and I know there are some bugs, but the code that was working before the rewrite is working again now.  Release this weekend is seeming likely.  Finally.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>86</wp:post_id>
<wp:post_date>2008-04-08 23:47:25</wp:post_date>
<wp:post_date_gmt>2008-04-09 03:47:25</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>thats-definitely-the-end-of-the-tunnel</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1207712845</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update-6/</link>
<pubDate>Sun, 20 Apr 2008 09:04:35 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=87</guid>
<description></description>
<content:encoded><![CDATA[Well, between real life obligations and several design flaws, I'm about a week behind my last schedule.  I've completely rewritten the backtracking and discard management systems, and I think they are both now mostly correct.  I've got to take a final (I hope) pass on error recovery, then do code generation, and out the door it goes.

Here's my latest test grammar (the test case follows).  You may notice a few changes in the grammar.  Priority direction is now configurable.  "ignore" tokens are now called "discard" tokens.  And they actually work, now. 

<code><pre>
grammar Math
   priority ascending
   start_rule program
   discard whitespace
   discard eol

   strings
      eol        => '\n'
      whitespace => [ \t\r]+
      
      digit      => [0-9]
      integer    => digit+
      
      identifier_first_char => [a-zA-Z_]
      identifier_char       => [{identifier_first_char}{digit}]
      identifier            => identifier_first_char identifier_char*      
   end
      
   program => statement+
   
   group expression
      integer
      identifier
      subexpression             => '(' expression ')'
      addition_expression       => expression:lhs '+' expression:rhs    @associativity=left
      subtraction_expression    => expression:lhs '-' expression:rhs    @associativity=left
      multiplication_expression => expression:lhs '*' expression:rhs    @associativity=left
      division_expression       => expression:lhs '/' expression:rhs    @associativity=left
      special_expression        => expression '*' expression '*' '(' identifier ')'
   end
   
   reorder
      addition_expression       substraction_expression
      multiplication_expression division_expression
   end

   group statement
      assignment_statement => identifier '=' expression eol:ignore ;
      if_statement         => 'if' '(' expression ')' '{' statement* '}' ;
      if_lookalike         => 'if' subexpression '{' statement* '}' 'booya' eol:ignore ;
   end
end

</pre></code>

Here's the test case:

<code><pre>
a = ((10 - 3)
)
b = 20

id = 10
if( 10 * 7 * (id) )
{
   a = 10 * 7 * (id) 
   b = 18 * 3 * (37) - 19 * 4 * (37)
   c = 12 - 14 - 27 * 36
}


if (10 - 3
)
{
   a = 10 * 
   7
}
booya

b = 20
</pre></code>

And the resulting tree:

<code><pre>
Math.program
   statements:
      [0]:
         Math.assignment_statement
            identifier:
               [a]:Math.identifier
            expression:
               Math.subexpression
                  expression:
                     Math.subexpression
                        expression:
                           Math.subtraction_expression
                              lhs:
                                 [10]:Math.integer
                              rhs:
                                 [3]:Math.integer
      [1]:
         Math.assignment_statement
            identifier:
               [b]:Math.identifier
            expression:
               [20]:Math.integer
      [2]:
         Math.assignment_statement
            identifier:
               [id]:Math.identifier
            expression:
               [10]:Math.integer
      [3]:
         Math.if_statement
            expression:
               Math.special_expression
                  expression_1:
                     [10]:Math.integer
                  expression_2:
                     [7]:Math.integer
                  identifier:
                     [id]:Math.identifier
            statements:
               [0]:
                  Math.assignment_statement
                     identifier:
                        [a]:Math.identifier
                     expression:
                        Math.special_expression
                           expression_1:
                              [10]:Math.integer
                           expression_2:
                              [7]:Math.integer
                           identifier:
                              [id]:Math.identifier
               [1]:
                  Math.assignment_statement
                     identifier:
                        [b]:Math.identifier
                     expression:
                        Math.subtraction_expression
                           lhs:
                              Math.multiplication_expression
                                 lhs:
                                    Math.multiplication_expression
                                       lhs:
                                          [18]:Math.integer
                                       rhs:
                                          [3]:Math.integer
                                 rhs:
                                    Math.subexpression
                                       expression:
                                          [37]:Math.integer
                           rhs:
                              Math.multiplication_expression
                                 lhs:
                                    Math.multiplication_expression
                                       lhs:
                                          [19]:Math.integer
                                       rhs:
                                          [4]:Math.integer
                                 rhs:
                                    Math.subexpression
                                       expression:
                                          [37]:Math.integer
               [2]:
                  Math.assignment_statement
                     identifier:
                        [c]:Math.identifier
                     expression:
                        Math.subtraction_expression
                           lhs:
                              Math.subtraction_expression
                                 lhs:
                                    [12]:Math.integer
                                 rhs:
                                    [14]:Math.integer
                           rhs:
                              Math.multiplication_expression
                                 lhs:
                                    [27]:Math.integer
                                 rhs:
                                    [36]:Math.integer
      [4]:
         Math.if_lookalike
            subexpression:
               Math.subexpression
                  expression:
                     Math.subtraction_expression
                        lhs:
                           [10]:Math.integer
                        rhs:
                           [3]:Math.integer
            statements:
               [0]:
                  Math.assignment_statement
                     identifier:
                        [a]:Math.identifier
                     expression:
                        Math.multiplication_expression
                           lhs:
                              [10]:Math.integer
                           rhs:
                              [7]:Math.integer
      [5]:
         Math.assignment_statement
            identifier:
               [b]:Math.identifier
            expression:
               [20]:Math.integer
</pre></code>
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>87</wp:post_id>
<wp:post_date>2008-04-20 05:04:35</wp:post_date>
<wp:post_date_gmt>2008-04-20 09:04:35</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-6</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1208717550</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Another month, another missed release date</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/another-month-another-missed-release-date/</link>
<pubDate>Mon, 05 May 2008 08:46:11 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=88</guid>
<description></description>
<content:encoded><![CDATA[Grrrr.  Integrating backtracking and error recovery has proven much more difficult than I had expected.   :-(  The existing error recovery code works at the syntactic level, but in order to behave correctly in a backtracking context, it has to effect changes at the lexical level, as syntactic changes don't survive a branch change.  Unfortunately, changing the underlying source in this way has proven non-trivial.

I'm currently working on moving lexing into the parser itself, so that it will be fully integrated with the backtracking system.  Doing so will make it a lot easier to make source changes for error recovery purposes, in that it will be possible to pre-calculate token examplars that can reliably produce the required type in the recovery branch, and that will still be present in other branches.  It also solves a design flaw that's been bugging me for a while: in the separate-lexer design, token types could not be fully context-sensitive.  For instance, a keyword would always lex as a keyword if in a syntactic context where the keyword was valid -- even if the following syntactic form required a different lexing.  Perhaps an example would be appropriate:

<pre><code>
   if x == y then
      if = 10
      x = if
   end
</code></pre>

In the second line, "if" is clearly meant as an identifier, not a keyword.  In the old code, it would always lex as a keyword in that context, because it *could* be the start of an if statement.  However, in the third line, the "if" would lex as an identifier, because the keyword "if" is not valid in that context.  Such arbitrary differences bother me.  The new design will allow backtracking to retry the lex with the second meaning, should the first meaning fail.

In any event, I had several false starts on this whole mess that wasted most of two weeks.  It only occurred to me that lexing could be done by the parser Friday night.  :-(  However, the requisite changes have been pushed out into three of the four layers of the compiler, with only the interpreter left to update.  Hopefully I'll know some time Tuesday night if everything actually works -- and performs well enough to be used.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>88</wp:post_id>
<wp:post_date>2008-05-05 04:46:11</wp:post_date>
<wp:post_date_gmt>2008-05-05 08:46:11</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>another-month-another-missed-release-date</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1209977171</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update-7/</link>
<pubDate>Tue, 20 May 2008 05:17:47 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=89</guid>
<description></description>
<content:encoded><![CDATA[Well, this latest plan to integrate lexing and parsing has proven to me that I'm not nearly as smart as I like to think I am.  However, I think I'm over the hump.  I bloody well hope.

In redesigning stuff, I was forced to deal with a number of design flaws that I'd kind of hoped to leave for later.  Also, just figuring out how to write the code proved difficult.  

At this point, I think I've got generalized discard working, which was a major hurdle.  During the redesign, I realized that discard handling was never really working.  I mean, it worked in the core cases, but there were a bunch of edge cases where the old code just wouldn't work (for instance, if the discard of a reduce item's context conflicted with the discard of a shift item in the same state).  As discard processing interacts heavily with lexing, I couldn't let it slide any longer.  I'm pretty sure it's all resolved, now.  The fact that it takes significantly less code the new way is one of the few joys I've had in this process.

While trying to diagnose a massive performance loss in state table generation once I integrated lexing, I realized some of my original assumptions on how to do LALR parsing were no longer useful.  As a result, I've been able to eliminate the performance problem and improve streaming support in the parser.  The most major change is that "reduce" operations no longer look ahead first, wherever possible.  Before, action selection was always tied to the type of the token on lookahead.  Unfortunately, this meant that the parser could never finish with one structure until it had read the first token from the next.  This obviously is not good for streaming.  The new code performs lookahead only when necessary, and never if reduce is the only possible action.  And the benefit for state table generation is that it eliminates a lot of lexical states altogether (for the RCC grammar, it cuts the size of the state table in half).  Of course, there are costs to this approach, including a significant complication of error recovery, in that errors will not be detected as early as they used to be.  However, I'm hopeful the benefits will outweigh the costs.

While banging my head against my desk over the last couple of weeks, I did also manage to find and fix a number of significant performance issues with the underlying data structures.  This is a good thing, since adding lexical stuff into the state table and properly dealing with discard has significantly increased the amount of work the system needs to do in order to generate a parser.  I'm hopeful the new code will at least break even on parser generation time.

Anyway, I've still got a ways to go with it before I can say for sure if this path is the right one.  However, with all the design and performance issues that have been resolved since my last commit to the repository, I'm not sure I'm in a position to walk away from the redesign, even if it doesn't work out as well as I'm hoping.

In terms of a new target date, I'm really not sure.  To be honest, I'm feeling rather burned out with this project, and I'm considering taking a few weeks off from it.  We'll see.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>89</wp:post_id>
<wp:post_date>2008-05-20 01:17:47</wp:post_date>
<wp:post_date_gmt>2008-05-20 05:17:47</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-7</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211260904</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>As usual, a Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/as-usual-a-status-update/</link>
<pubDate>Sun, 25 May 2008 08:21:18 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=90</guid>
<description></description>
<content:encoded><![CDATA[Well, I've committed the new integrated lexer/parser to Subversion.  The state generation time has increased between 20 and 50% over the previous version (depending on which runs you compare), but the state tables do look correct for little things like gateway expressions and discard processing, so I'll live with it.  And I'm pretty sure I can find a few more optimizations in there, too.

Next up: integrating the new actions and policies into the interpreter.  That should be straight forward.  Then: fixing up error recovery to use the new system.  That probably won't be.  :-(  However, with that done, it will be down to code generation.  Yeah, I know -- I've thought that before.  Still, things are looking up.


]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>90</wp:post_id>
<wp:post_date>2008-05-25 04:21:18</wp:post_date>
<wp:post_date_gmt>2008-05-25 08:21:18</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>as-usual-a-status-update</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211703678</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Good news and bad news</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/good-news-and-bad-news/</link>
<pubDate>Tue, 27 May 2008 03:51:22 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=91</guid>
<description></description>
<content:encoded><![CDATA[Well, the interpreter is interpreting again, with the integrated lexer, and runs to completion.  Yay!

Unfortunately, it is now taking 1.37 seconds to process a source file it used to do in 0.17 seconds.  Which **SUCKS**.  

I have some ideas on how to improve the situation, but they will have to wait for another day . . . .

G'night.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>91</wp:post_id>
<wp:post_date>2008-05-26 23:51:22</wp:post_date>
<wp:post_date_gmt>2008-05-27 03:51:22</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>good-news-and-bad-news</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211860282</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Better news</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/better-news/</link>
<pubDate>Tue, 27 May 2008 22:55:38 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=92</guid>
<description></description>
<content:encoded><![CDATA[0.25 seconds.  Yay!

Last night I moved the lexical processing out of the main parser and into a mini parser of its own.  It still works the same way, but dispenses with the main parser's overhead.  I still have some loose ends to tie up, but that alone pulled the test run from 1.37 seconds down to 0.92 seconds.

I found another 0.7 seconds in the character map lookup used to find actions during lexing.  Building the faster data structure adds about 0.4 seconds to the generation run, but knocks the runtime parse down to 0.25 seconds for the example grammar.  

And, to be clear, that's for an interpreted grammar, using an interpreter written in Ruby.  The good news is that I think the code generation layer can improve on that quite a bit more.  :-)  And while I doubt RCC parsers will ever win races against other parsers, I think they can be convinced to turn out a respectable performance.

It's official: the integrated lexer is here to stay.
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>92</wp:post_id>
<wp:post_date>2008-05-27 18:55:38</wp:post_date>
<wp:post_date_gmt>2008-05-27 22:55:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>better-news</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211928938</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update-8/</link>
<pubDate>Tue, 10 Jun 2008 12:49:52 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=93</guid>
<description></description>
<content:encoded><![CDATA[Just a quick note to say there's been no new progress.  70 hours of paying work last week.  Until that lets up (later this week, I hope), I won't be getting any RCC work done.  :-(]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>93</wp:post_id>
<wp:post_date>2008-06-10 08:49:52</wp:post_date>
<wp:post_date_gmt>2008-06-10 12:49:52</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-8</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1218899733</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/status-update-9/</link>
<pubDate>Sat, 16 Aug 2008 15:19:31 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=94</guid>
<description></description>
<content:encoded><![CDATA[Wow -- two months since I've touched RCC.  My apologies -- work got very busy for a while, and then I took a much needed vacation.  

I started picking up the code last night -- it's been a while, so it's going to take a few days.  My first order of business will be to make a checklist of everything remaining to be done and post it here (well, in Trac) and probably open up the repository.  Time this thing sees the light of day, even if it isn't quite finished.

I'll post links as soon as they are ready.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>94</wp:post_id>
<wp:post_date>2008-08-16 11:19:31</wp:post_date>
<wp:post_date_gmt>2008-08-16 15:19:31</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-9</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1218899971</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Repository</title>
<link>http://rcc.courage-my-friend.org/repository/</link>
<pubDate>Wed, 27 Aug 2008 14:41:50 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?page_id=95</guid>
<description></description>
<content:encoded><![CDATA[Attach stuff here.  Click save when done.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>95</wp:post_id>
<wp:post_date>2008-08-27 10:41:50</wp:post_date>
<wp:post_date_gmt>2008-08-27 14:41:50</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>repository</wp:post_name>
<wp:status>private</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1219848110</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Status Update</title>
<link>http://rcc.courage-my-friend.org/uncategorized/articles/status-update-10/</link>
<pubDate>Sun, 21 Sep 2008 23:44:46 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=96</guid>
<description></description>
<content:encoded><![CDATA[Well, I'll admit it, it's been difficult picking this project up again.  However, it's slowly getting under way.  Last week, I started converting the codebase to Ruby 1.9 (some of the APIs have changed) so I can run it with MacRuby.  Why?  Because I'm interested, and because MacRuby promises performance improvements.  I'm hoping.  :-)  I toyed with redoing the whole thing in Objective-C, but, fortunately, sanity showed up to rain on that parade.  Hopefully, I can finish the 1.9 conversion tonight.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>96</wp:post_id>
<wp:post_date>2008-09-21 19:44:46</wp:post_date>
<wp:post_date_gmt>2008-09-21 23:44:46</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>status-update-10</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1222040686</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Actual Progress</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/actual-progress/</link>
<pubDate>Thu, 25 Sep 2008 03:49:14 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=97</guid>
<description></description>
<content:encoded><![CDATA[I seem to actually be fixing bugs.  Yay!  

Also of note, MacRuby runs RCC quite a bit more slowly than real Ruby 1.8, so I've abandoned the "upgrade".]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>97</wp:post_id>
<wp:post_date>2008-09-24 23:49:14</wp:post_date>
<wp:post_date_gmt>2008-09-25 03:49:14</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>actual-progress</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1222314554</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>More Progress</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/more-progress/</link>
<pubDate>Mon, 29 Sep 2008 03:36:10 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=98</guid>
<description></description>
<content:encoded><![CDATA[Found and fixed some bugs and design flaws with discard processing.  I'm now working on bugs and unfinished code in the interpreter itself.  Notably, some of my sample grammars use more of the RCC feature-set than the RCC grammar itself, so these second-level interpreters are important for getting everything to code-complete status.  I'm presently in the guts of backtracking support in the lexical processor.
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>98</wp:post_id>
<wp:post_date>2008-09-28 23:36:10</wp:post_date>
<wp:post_date_gmt>2008-09-29 03:36:10</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>more-progress</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1222659370</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Back on it</title>
<link>http://rcc.courage-my-friend.org/announcements/articles/back-on-it/</link>
<pubDate>Sat, 24 Jan 2009 09:15:12 +0000</pubDate>
<dc:creator><![CDATA[Chris Poirier]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://rcc.courage-my-friend.org/?p=99</guid>
<description></description>
<content:encoded><![CDATA[Well, time flies.  I started picking up the project again tonight, with plans of spending some serious time on it over the next 2 or 3 weeks.  Tonight, I made a few cosmetic improvements to the grammar description language and cleaned a bunch of cruft out of the codebase.  This weekend, I hope to get a good handle on what remains to be done, and clean up as many messes as I can.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>99</wp:post_id>
<wp:post_date>2009-01-24 05:15:12</wp:post_date>
<wp:post_date_gmt>2009-01-24 09:15:12</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>back-on-it</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1232788512</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
</channel>
</rss>
